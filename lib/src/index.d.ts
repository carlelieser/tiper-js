export interface tiperOptions {
    text?: string;
    hesitation?: number;
    accuracy?: number;
    wordsPerMinute?: number;
    pauseTimeout?: number;
    pauseOnSpace?: boolean;
    pauseOnEndOfSentence?: boolean;
    showCaret?: boolean;
    caretType?: string;
    glitch?: boolean;
    onFinishedTyping?: Function;
}
export interface repeatConfig {
    values?: Array<string>;
    action?: string;
    getValue?: Function;
    repeatAmount: number;
    delay: number;
}
declare class Tiper {
    private container;
    private caretElement;
    private options;
    private typingInterval;
    private glitchInterval;
    private currentTextElement;
    private currentTypos;
    private currentText;
    private currentIndex;
    private charsToDelete;
    private repeatAmount;
    private repeatAction;
    private repeatValue;
    private typingListener;
    constructor(container: Element, options?: tiperOptions);
    private throwError;
    private setRepeatSettings;
    private trim;
    private setCharsToDelete;
    private setRepeatValue;
    private getTypingSpeed;
    private getCaretCharacter;
    private generateArrayWithSameValues;
    private generateBinaryTypoMap;
    private getClosestKey;
    private generateTypos;
    private setCurrentTypos;
    private updateTypos;
    private setCurrentText;
    private setCurrentTextElement;
    private getCurrentText;
    private getTextByRange;
    private getCaretLength;
    private sourceTextIsTargetLength;
    private observeTyping;
    private setFinishedTyping;
    private resetFinishedTyping;
    private updateElementText;
    stopTyping: () => Promise<void>;
    pauseTyping: (ms?: number) => Promise<void>;
    resumeTyping: (reverse?: boolean, reset?: boolean) => void;
    private delay;
    private applyVariation;
    private getCharAt;
    private isEndOfSentence;
    private getShouldPause;
    private fixTypoAtIndex;
    private applyAndCorrectTypo;
    private insertCurrentChar;
    private activateCaret;
    private deactivateCaret;
    private createSpan;
    private appendElementToContainer;
    private initializeTextElement;
    private initializeCaret;
    private initializeGlitchEffect;
    private initializeTypingInterval;
    private setElementText;
    private getElementText;
    private resetElementText;
    private getRandomGlitchChar;
    private generateGlitchText;
    private applyGlitch;
    beginTyping: (text?: string, reset?: boolean) => Promise<void>;
    line: (text: string, reset?: boolean) => Promise<void>;
    back: (chars?: number) => Promise<void>;
    repeat: (repeatAmount: number | string, repeatAction: Function) => Promise<void>;
    private continueRepeat;
    private generateRepeatAction;
    easyRepeat: (config: repeatConfig) => Promise<void>;
    targetRepeat: (config: repeatConfig) => Promise<void>;
    setAccuracy: (accuracy: number) => void;
    destroy: () => Promise<boolean>;
    isFinished: () => boolean;
}
export default Tiper;
